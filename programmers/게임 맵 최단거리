import java.util.*;

class Solution {
    int[] dx = { -1, 1, 0, 0 };
    int[] dy = { 0, 0, -1, 1 };
    boolean[][] visited;
    int[][] map;
    int n,m;
    int answer = -1;
    
    public int solution(int[][] maps) {
        map = maps;
        n = maps.length;
        m = maps[0].length;
        visited = new boolean[n][m];
        int[] dx = { -1, 1, 0, 0 };
        int[] dy = { 0, 0, 1, -1 };

        bfs(0, 0, 1);
        return answer;
    }

    public void bfs(int x, int y, int dist){
        Queue<Node> q = new LinkedList<>();
        q.offer(new Node(x, y, dist));
        visited[x][y] = true;

        while(!q.isEmpty()){
            Node node = q.poll();

            if (node.getX() == n-1 && node.getY() == m-1) {
                answer = node.getDist();
                break;
            }

            for(int i=0 ; i<4 ; i++){
                int nx = node.getX() + dx[i];
                int ny = node.getY() + dy[i];
                if(nx < 0 || ny < 0 || nx >= n || ny >= m) continue;
                if(visited[nx][ny]) continue;
                if(map[nx][ny] == 0) continue;

                q.offer(new Node(nx,ny,node.getDist()+1));
                visited[nx][ny] = true;
            }
        }
    }
}

class Node{
    private int x;
    private int y;
    private int dist;

    public Node(int x, int y, int dist){
        this.x = x;
        this.y = y;
        this.dist = dist;
    }

    public int getX(){
        return this.x;
    }
    public int getY(){
        return this.y;
    }
    public int getDist(){
        return this.dist;
    }

}
