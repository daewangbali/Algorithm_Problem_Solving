import java.util.*;
class Solution {
    public int[] solution(int N, int[] stages) {
        int[] notclear = new int[N+1];
        
        for(int i=0 ; i<stages.length ; i++){
            if(stages[i] > N) continue;
            notclear[stages[i]]++;
        }

        int challengers = stages.length;
        List<Stage> stagelist = new ArrayList<>();
        for (int id = 1 ; id <= N; id++) {
            double failure = (double) notclear[id] / challengers ;
            challengers -= notclear[id];

            Stage s = new Stage(id, failure);
            stagelist.add(s);
        }
        Collections.sort(stagelist, Collections.reverseOrder());

        int[] answer = new int[N];
        for (int i = 0; i < N; i++) {
            answer[i] = stagelist.get(i).id;
        }
        return answer;
    }

    class Stage implements Comparable<Stage> {
        public int id;
        public double failure;

        public Stage(int id_, double failure_) {
            id = id_;
            failure = failure_;
        }

        @Override
        public int compareTo(Stage o) {
            if (failure < o.failure ) {
                return -1;
            }
            if (failure > o.failure ) {
                return 1;
            }
            return 0;
        }
    }
}
